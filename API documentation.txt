GET / 

res:
        backgroundimg: "test.png",
        logo: "logo.png",
        img1: "test.png", title1: "Schedule Your Time", placetext1: "Plan Your journey based on your clock!",
        img2: "test2.png", title2: "Plan Your Route", placetext2: "Set Your trip with ease using our reliable bus schedules.",
        img3: "test3.png", title3: "Choose Language", placetext3: "Select Your Language",
        languages: ["English", "Arabic"]

-------------------------------------------


GET /main
Headers:
Authorization: <token>
for example:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJRCI6MSwiaWF0IjoxNzMwMTkwMjg3LCJleHAiOjE3MzAxOTM4ODd9.eu8UjJ32jBGbrnTjL70qkfRssAd6SYJRVO0K-xfxgPY 

res:
	background: "test.png",
	placetext: "Welcome to my app",



----------------------------------------------------


POST /register/driver

Body:
	username
	email
	phone_number
	first_name
	last_name
res:

'Username is required and cannot be empty.'
'Invalid email format'
'Invalid phone number format'
'First name cannot be empty or only spaces.'
'Last name cannot be empty or only spaces.'
message:'User with this email or username already exists'
message:'Database error'
message:'Database error during registration'
message:'Registration successful'
message:'Error in sign up:'
message:'Server error' 





-------------------------------------------------------

POST /login

Body:
	email
	or
	phone_number

'Invalid email format'
'Invalid phone number'
message:'Please provide either email or phone number, but not both.'
message:'Duplicate OTP has been found for ${user.email}' 
message:'User not found'
message:'Database error'
message: 'Login successful. OTP has been sent to your email or phone.',
ID: user.ID





-------------------------------------------------------

POST /validate-otp

Body:
	email
	or
	phone_number
	
	otp <4 Digits>


'OTP is required'
'OTP must be numeric'
'Invalid phone number'
'Invalid email format'
message: 'Database error while retrieving user ID'

message: 'No user associated with this contact information'
message: 'Database error while retrieving OTP'
message: 'OTP not found or expired'
message: 'Invalid OTP'
message: 'OTP has expired'
 message: 'OTP validated successfully. You are now logged in.',




// it returns auth <token> for the user
sessionToken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,

ID: user.ID

-------------------------------------------------------------------------
POST /register/user
Request Body:
username: User's username
email: User's email address
phone_number: User's phone number
first_name: User's first name
last_name: User's last name

--------------------------------------------------------------------------
POST /register/driver
Request Body:
username: Driver's username
email: Driver's email address
phone_number: Driver's phone number
first_name: Driver's first name
last_name: Driver's last name

-------------------------------------------------------------------------
POST /register/bus
Request Body:

driver_id: Driver's ID (integer)
bus_number: Bus number (integer)
board_symbol: Bus plate symbol
driving_license_number: Driving license number (integer)
bus_specification: Bus type or specification
air_conditioner: Boolean value (true or false)
image: Image URL or path (string)

Headers:
Authorization: JWT token (Bearer token)

-------------------------------------------------------------------------
POST /login
Request Body:
email (optional): User's email address
phone_number (optional): User's phone number

-------------------------------------------------------------------------
POST /logout
Headers:
Authorization: JWT token (Bearer token)


-------------------------------------------------------------------------
POST /validate-otp
Request Body:
email (optional): User's email address
phone_number (optional): User's phone number
otp: 4-digit OTP
-------------------------------------------------------------------------


GET /trips/previous/:driverId
Parameters:
driverId: Driver's ID (URL parameter)
Headers:

Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------

GET /trips/next/:driverId
Parameters:
driverId: Driver's ID (URL parameter)

Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
GET /trips/:tripId/details
Parameters:
tripId: Trip's ID (URL parameter)

Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
POST /trips/new
Request Body:
date: Trip date
time: Trip time
passenger_type: Type of passenger ('Male', 'Female', or 'Both')
subscription_type: Type of subscription

Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
POST /trips/:tripId/start
Parameters:

tripId: Trip's ID (URL parameter)
Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
POST /trips/:tripId/start-end-current
Parameters:
tripId: Trip's ID (URL parameter)

Request Body:

startLocation: Starting location coordinates (latitude, longitude)
endLocation: Ending location coordinates (latitude, longitude)
currentLocation: Current location coordinates (latitude, longitude)

Headers:
Authorization: JWT token (Bearer token)

-------------------------------------------------------------------------
POST /trips/:tripId/stop-point
Parameters:
tripId: Trip's ID (URL parameter)

Request Body:
long: Longitude of the stop point
lat: Latitude of the stop point
Headers:
Authorization: JWT token (Bearer token)

-------------------------------------------------------------------------
GET /trips/live
Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------

POST /trips/update-locations
Request Body: None (The request updates live locations for all operating trips)
Headers:
Authorization: JWT token (Bearer token)

-------------------------------------------------------------------------
"Driver ID must be an integer."
"Bus Number must be an integer."
"Board Symbol cannot be empty."
"Driving License Number must be an integer."
"Bus Specification cannot be empty."
"Air Conditioner must be true or false."
"Image cannot be empty."

message: "Error registering bus information"

message: "Bus registration successful"
-------------------------------------------------------------------------

GET /trips/previous/:driverId
Parameters:
driverId: Driver's ID (URL parameter)
Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
GET /trips/next/:driverId
Parameters:
driverId: Driver's ID (URL parameter)
Headers:
Authorization: JWT token (Bearer token)

GET /trips/:tripId/details
Parameters:
tripId: Trip's ID (URL parameter)
Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
POST /trips/new
Request Body:
date: Trip date
time: Trip time
passenger_type: Type of passenger (either 'Male', 'Female', or 'Both')
subscription_type: Type of subscription
Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
POST /trips/:tripId/start
Parameters:
tripId: Trip's ID (URL parameter)
Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
POST /trips/:tripId/start-end-current
Parameters:
tripId: Trip's ID (URL parameter)
Request Body:
startLocation: Starting location coordinates (latitude, longitude)
endLocation: Ending location coordinates (latitude, longitude)
currentLocation: Current location coordinates (latitude, longitude)
Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
POST /trips/:tripId/stop-point
Parameters:
tripId: Trip's ID (URL parameter)
Request Body:
long: Longitude of the stop point
lat: Latitude of the stop point
Headers:
Authorization: JWT token (Bearer token)
-------------------------------------------------------------------------
GET /trips/live
Headers:
Authorization: JWT token (Bearer token)
POST /trips/update-locations
Request Body: None (The request updates live locations for all operating trips)
Headers:
Authorization: JWT token (Bearer token)




-------------------------------------------------------------------------

POST /upload/passport
Purpose: Upload a passport image for a driver.

Request Body:
email (optional): Driver's email address
phone_number (optional): Driver's phone number

File:
passport: Passport file (image)

Validation:
Email or phone number is required, but not both.

Response:
Returns a success message with the file path if the passport is uploaded successfully.
-------------------------------------------------------------------------
POST /upload/idcard
Purpose: Upload an ID card image for a driver.

Request Body:

email (optional): Driver's email address
phone_number (optional): Driver's phone number

File:
idcard: ID card file (image)

Validation:

Email or phone number is required, but not both.

Response:
Returns a success message with the file path if the ID card is uploaded successfully.



